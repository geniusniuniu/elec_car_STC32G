C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\USER\src\isr.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "Motor.h"
    3          #include "Buzzer.h"
    4          #include "ADC.h"
    5          #include "math.h"
    6          #include "MPU6050.h"
    7          #include "TOF.h"
    8          #include "Element.h"
    9          #define LED P52
   10          
   11          extern char Down_Flag;
   12          extern volatile uint16 Dis_Process;
   13          
   14          short gx, gy, gz;
   15          char Speed_Delay = 40;
   16          char Isr_Flag_10 = 0;
   17          float Flag_Out_L = 0;
   18          float Flag_Out_R = 0;
   19          
   20          float sum_L,sum_R;
   21          float Diff,Plus;
   22          float Ratio = 0;
   23          float Diff_Mid,Plus_Mid;
   24          float Ratio_Mid = 0;
   25          float Exp_Speed_L = 0;
   26          float Exp_Speed_R = 0;
   27          volatile float Exp_Speed = 0;
   28          
   29          char  Flag_Stop = 0;
   30          float Act_PwmL; 
   31          float Act_PwmR;
   32          float Angle_Edge = 0;
   33          
   34          char Edge_Delay = 0;
   35          char count = 0;
   36          void Get_Ratio(void);
   37          
   38          void TM4_Isr() interrupt 20
   39          {
   40   1              TIM4_CLEAR_FLAG; //清除中断标志
   41   1              count++;
   42   1          Isr_Flag_10 = 1;
   43   1              Get_Speed();  //获取车速
   44   1              ADC_GetValue();                                         //获取电感值
   45   1              Get_Ratio();                                            //计算偏差值
   46   1          
   47   1      /*********************** 直道弯道变速 **********************************/ 
   48   1              
   49   1          Turn_PID.Kpa = -0.001;//理论来讲kpa和kpb同号
   50   1          Turn_PID.Kpb = -120;//-170;  
   51   1          Turn_PID.Kd = 1.5;
   52   1          
   53   1              if(Ratio >= -0.15 && Ratio <= 0.15) //直线
   54   1          {
   55   2      //        Turn_PID.Kpb = -120;//-170;  
   56   2      //              Turn_PID.Kd = 1.5;// 
   57   2              Exp_Speed = 260;   
C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 2   

   58   2          }
   59   1          else
   60   1          {
   61   2      //        Turn_PID.Kpb = -120;//-250; 
   62   2      //              Turn_PID.Kd = 14.5;// 
   63   2              Exp_Speed = 240;        
   64   2          } 
   65   1      
   66   1      /************************************************ 圆环判别 **********************************************
             -*/ 
   67   1          
   68   1              if(ADC_proc[2] > 66 || ADC_proc[0] > 65 || ADC_proc[4] > 65) 
   69   1              {
   70   2              Circle_Flag1 = 1; 
   71   2              x10_ms = 30;                                                                    //识别到圆环标志位
   72   2              }
   73   1          if(Dis_Process <= 50)           //幅值滤波（TOF读值会莫名跳变）
   74   1              Dis_Process = 810;
   75   1          
   76   1              if(Dis_Process < 400)           //测距值小于50cm，区分坡道，且只执行一次
   77   1                      Circle_Delay1 = 500;        //延时5秒
   78   1          
   79   1          if(Circle_Flag2 != 0)           //一旦距离积分足够，Circle_Delay1取消延时
   80   1              Circle_Delay1 = 0;
   81   1              if(Circle_Delay1 > 0)                   //检测到坡道
   82   1              {
   83   2                      Circle_Flag1 = 0;                       //清零环岛标志位                                                
   84   2                      Circle_Delay1--;
   85   2              }
   86   1          Elem_Circle((Speed_L+Speed_R)/2,gz);
   87   1              
   88   1      /************************************************ 大弯丢线 ********************************************/ 
             -                
   89   1              if(Flag_Out_L == 1 && (--Edge_Delay) > 0 )   //--Edge_Delay 保证清零时不会再进判断
   90   1              {
   91   2                      Ratio = 0.45+((int)(Speed_R/10))*0.015; 
   92   2              }
   93   1              else if(Flag_Out_R == 1 && (--Edge_Delay) > 0)
   94   1              {
   95   2                      Ratio = -0.45-((int)(Speed_L/10))*0.015;        
   96   2              }
   97   1              else
   98   1                      Edge_Delay = 0;
   99   1          
  100   1              
  101   1      /************************************************ 转向环计算 ********************************************
             -**/    
  102   1          
  103   1              Limit_Out(&Ratio,-0.9,0.9);   //限幅
  104   1              PID_Calculate(&Turn_PID,Ratio*150,gz/100);                              
  105   1              Limit_Out(&Turn_PID.PID_Out,-8000,8000);
  106   1              
  107   1      //    if(Barrier_Executed == 0)
  108   1      //        Exp_Speed = 220;
  109   1      
  110   1              if(Ratio >= 0)  
  111   1              {
  112   2                      Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.09;
  113   2                      Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.08*(1-Ratio);
  114   2              }
  115   1              else
  116   1              {
  117   2                      Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.08*(1+Ratio);
  118   2                      Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.09;
  119   2              }
  120   1              
C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 3   

  121   1              PID_Incremental_Calc(&Left_Wheel,Exp_Speed_L,Speed_L);
  122   1              PID_Incremental_Calc(&Right_Wheel,Exp_Speed_R,Speed_R);
  123   1          
  124   1      /********************************************* 驶离赛道，撞到障碍，停车 *********************************
             -************/
  125   1              if(Speed_Delay > 0)
  126   1              Speed_Delay --;
  127   1          if(Speed_Delay == 0 && abs(Speed_L) < 5 && abs(Speed_R) < 5)
  128   1                      Flag_Stop = 1;
  129   1          
  130   1      /********************************************* 设置左右PWM **********************************************
             -**/           
  131   1      
  132   1          if(Dis_Process < 150 || Flag_Stop == 1) 
  133   1              {
  134   2                      Act_PwmL = Left_SetSpeed(0);            
  135   2                      Act_PwmR = Right_SetSpeed(0);
  136   2              }
  137   1              else
  138   1              {
  139   2              Act_PwmL = Left_SetSpeed(Left_Wheel.out);
  140   2              Act_PwmR = Right_SetSpeed(Right_Wheel.out);
  141   2              }
  142   1      
  143   1              //蜂鸣器
  144   1              if(x10_ms > 0)
  145   1              {
  146   2                      pwm_duty(PWMB_CH4_P77,2000);
  147   2                      x10_ms--;
  148   2              }
  149   1              else
  150   1                      pwm_duty(PWMB_CH4_P77,0);
  151   1              
  152   1              //闪灯
  153   1          if(count > 50)
  154   1          {
  155   2                      LED = !LED;
  156   2                      count = 0;
  157   2          }
  158   1      
  159   1      }
  160          
  161          //对ADC值进行处理得到差比和
  162          void Get_Ratio(void)
  163          {    
  164   1          static float sum_01;
  165   1          static float sum_34;
  166   1          static float sum;
  167   1          
  168   1              sum_L = sqrt(ADC_proc[0]*ADC_proc[0]+ADC_proc[1]*ADC_proc[1]);
  169   1              sum_R = sqrt(ADC_proc[4]*ADC_proc[4]+ADC_proc[3]*ADC_proc[3]);
  170   1              Diff = sum_L - sum_R;
  171   1              Plus = sum_L + sum_R;
  172   1                 
  173   1          sum_01  = ADC_proc[0] + ADC_proc[1];
  174   1          sum_34  = ADC_proc[3] + ADC_proc[4];
  175   1          sum     = sum_01 + sum_34;
  176   1          
  177   1              if((sum > EDGE_PROTECT) && Barrier_Flag1 == 0)  
  178   1              {
  179   2                      Ratio = Diff/Plus;                                                                      //如果小于EDGE_PROTECT//视作丢线，下次偏差值
  180   2                      Flag_Out_L = 0;                                                                         //在上次基础上再次加（减）
  181   2                      Flag_Out_R = 0;
  182   2                      Edge_Delay= 0;
  183   2              }                                                                                                                                                       
  184   1              else                                                                                                                                            
C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 4   

  185   1              {
  186   2              if(ADC_proc[0] + ADC_proc[4] < 5) 
  187   2                  Flag_Stop = 1;
  188   2              //在避障阶段和环岛阶段以及上一次丢线未寻回前不做判断
  189   2                      if(Barrier_Flag1 == 1 && Circle_Flag1 == 0 && Circle_Delay2 == 0 && Edge_Delay == 0)  
  190   2                      {
  191   3                 Edge_Delay = 2;      //50ms  
  192   3                 if(sum_01 >= sum_34 && Flag_Out_R == 0) 
  193   3                 {  
  194   4                       Flag_Out_L = 1;
  195   4                 } 
  196   3                 else if(sum_01 < sum_34 && Flag_Out_L == 0) 
  197   3                 {
  198   4                       Flag_Out_R = 1;
  199   4                 } 
  200   3              }
  201   2              }
  202   1      }
  203          
  204          
  205          
  206          
  207          
  208          
  209          
  210          
  211          
  212          
  213          
  214          
  215          
  216          
  217          
  218          
  219          
  220          
  221          
  222          
  223          
  224          
  225          
  226          
  227          //UART1中断
  228          void UART1_Isr() interrupt 4
  229          {
  230   1          uint8 res;
  231   1              static uint8 dwon_count;
  232   1          if(UART1_GET_TX_FLAG)
  233   1          {
  234   2              UART1_CLEAR_TX_FLAG;
  235   2              busy[1] = 0;
  236   2          }
  237   1          if(UART1_GET_RX_FLAG)
  238   1          {
  239   2              UART1_CLEAR_RX_FLAG;
  240   2              res = SBUF;
  241   2              //程序自动下载
  242   2              if(res == 0x7F)
  243   2              {
  244   3                  if(dwon_count++ > 20)
  245   3                      IAP_CONTR = 0x60;
  246   3              }
  247   2              else
  248   2              {
  249   3                  dwon_count = 0;
  250   3              }
C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 5   

  251   2          }
  252   1      }
  253          
  254          //UART2中断
  255          void UART2_Isr() interrupt 8
  256          {
  257   1          if(UART2_GET_TX_FLAG)
  258   1              {
  259   2              UART2_CLEAR_TX_FLAG;
  260   2                      busy[2] = 0;
  261   2              }
  262   1          if(UART2_GET_RX_FLAG)
  263   1              {
  264   2              UART2_CLEAR_RX_FLAG;
  265   2                      //接收数据寄存器为：S2BUF
  266   2      
  267   2              }
  268   1      }
  269          
  270          
  271          //UART3中断
  272          void UART3_Isr() interrupt 17
  273          {
  274   1          if(UART3_GET_TX_FLAG)
  275   1              {
  276   2              UART3_CLEAR_TX_FLAG;
  277   2                      busy[3] = 0;
  278   2              }
  279   1          if(UART3_GET_RX_FLAG)
  280   1              {
  281   2              UART3_CLEAR_RX_FLAG;
  282   2                      //接收数据寄存器为：S3BUF
  283   2      
  284   2              }
  285   1      }
  286          
  287          
  288          //UART4中断
  289          void UART4_Isr() interrupt 18
  290          {
  291   1          if(UART4_GET_TX_FLAG)
  292   1              {
  293   2              UART4_CLEAR_TX_FLAG;
  294   2                      busy[4] = 0;
  295   2              }
  296   1          if(UART4_GET_RX_FLAG)
  297   1              {
  298   2              UART4_CLEAR_RX_FLAG;
  299   2      
  300   2                      //接收数据寄存器为：S4BUF;
  301   2                      if(wireless_type == WIRELESS_SI24R1)
  302   2              {
  303   3                  wireless_uart_callback();           //无线转串口回调函数
  304   3              }
  305   2              else if(wireless_type == WIRELESS_CH9141)
  306   2              {
  307   3                  bluetooth_ch9141_uart_callback();   //蓝牙转串口回调函数
  308   3              }
  309   2              else if(wireless_type == WIRELESS_CH573)
  310   2              {
  311   3                  wireless_ch573_callback();          //CH573无线模块回调函数
  312   3              }
  313   2              }
  314   1      }
  315          
  316          #define LED P52
C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 6   

  317          void INT0_Isr() interrupt 0
  318          {
  319   1              LED = 0;        //点亮LED
  320   1      }
  321          void INT1_Isr() interrupt 2
  322          {
  323   1      
  324   1      }
  325          void INT2_Isr() interrupt 10
  326          {
  327   1              INT2_CLEAR_FLAG;  //清除中断标志
  328   1      }
  329          void INT3_Isr() interrupt 11
  330          {
  331   1              INT3_CLEAR_FLAG;  //清除中断标志
  332   1      }
  333          
  334          void INT4_Isr() interrupt 16
  335          {
  336   1              INT4_CLEAR_FLAG;  //清除中断标志
  337   1      }
  338          
  339          void TM0_Isr() interrupt 1
  340          {
  341   1      
  342   1      }
  343          void TM1_Isr() interrupt 3
  344          {
  345   1      
  346   1      }
  347          void TM2_Isr() interrupt 12
  348          {
  349   1              TIM2_CLEAR_FLAG;  //清除中断标志
  350   1              
  351   1      }
  352          void TM3_Isr() interrupt 19
  353          {
  354   1              TIM3_CLEAR_FLAG; //清除中断标志
  355   1              
  356   1      }
  357          
  358          
  359          //void  INT0_Isr()  interrupt 0;
  360          //void  TM0_Isr()   interrupt 1;
  361          //void  INT1_Isr()  interrupt 2;
  362          //void  TM1_Isr()   interrupt 3;
  363          //void  UART1_Isr() interrupt 4;
  364          //void  ADC_Isr()   interrupt 5;
  365          //void  LVD_Isr()   interrupt 6;
  366          //void  PCA_Isr()   interrupt 7;
  367          //void  UART2_Isr() interrupt 8;
  368          //void  SPI_Isr()   interrupt 9;
  369          //void  INT2_Isr()  interrupt 10;
  370          //void  INT3_Isr()  interrupt 11;
  371          //void  TM2_Isr()   interrupt 12;
  372          //void  INT4_Isr()  interrupt 16;
  373          //void  UART3_Isr() interrupt 17;
  374          //void  UART4_Isr() interrupt 18;
  375          //void  TM3_Isr()   interrupt 19;
  376          //void  TM4_Isr()   interrupt 20;
  377          //void  CMP_Isr()   interrupt 21;
  378          //void  I2C_Isr()   interrupt 24;
  379          //void  USB_Isr()   interrupt 25;
  380          //void  PWM1_Isr()  interrupt 26;
  381          //void  PWM2_Isr()  interrupt 27;

C251 COMPILER V5.60.0,  isr                                                                05/06/24  20:49:02  PAGE 7   


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1551     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        88     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        89     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
