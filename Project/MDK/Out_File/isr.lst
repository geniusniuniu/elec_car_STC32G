C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\USER\src\isr.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "Motor.h"
    3          #include "Buzzer.h"
    4          #include "ADC.h"
    5          #include "math.h"
    6          #include "MPU6050.h"
    7          #include "TOF.h"
    8          #include "Element.h"
    9          #define LED P52
   10          
   11          extern char Down_Flag;
   12          extern float Dis_Process;
   13          
   14          short gx, gy, gz;
   15          char Speed_Delay = 40;
   16          char Isr_Flag_10 = 0;
   17          char Distance_Num = 0;
   18          char  Flag_Stop = 0;
   19          char Edge_Delay = 0;
   20          char count = 0;
   21          char Read_Nums = 0;
   22          
   23          float Flag_Out_L = 0;
   24          float Flag_Out_R = 0;
   25          float Diff,Plus;
   26          float Ratio = 0;
   27          float Diff_Mid,Plus_Mid;
   28          float Ratio_Mid = 0;
   29          float Exp_Speed_L = 0;
   30          float Exp_Speed_R = 0;
   31          float Act_PwmL; 
   32          float Act_PwmR;
   33          float Angle_Edge = 0;
   34          float Sum_Dis = 0;
   35          float sum_L,sum_R;
   36          float Exp_Speed_gain = 1.0;
   37          volatile float Exp_Speed = 0;
   38          
   39          void Get_Ratio(void);
   40          
   41          void TM4_Isr() interrupt 20
   42          {
   43   1              TIM4_CLEAR_FLAG;       //清除中断标志
   44   1              count++;
   45   1          Isr_Flag_10 = 1;
   46   1              Get_Speed();            //获取车速
   47   1              ADC_GetValue();                 //获取电感值
   48   1          Get_Ratio();                        //计算偏差值
   49   1          vl53l0x_get_distance();             //距离测量
   50   1         
   51   1      /*********************** 直道弯道变速 **********************************/       
   52   1          Turn_PID.Kpa = -0.0006;//理论来讲kpa和kpb同号
   53   1          Turn_PID.Kpb = -80;//-170;  
   54   1          Turn_PID.Kd = -35;//20;  //1.5
   55   1          
   56   1              if(Ratio >= -0.15 && Ratio <= 0.15) //直线
   57   1          {
C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 2   

   58   2              Exp_Speed = 280;   
   59   2          }
   60   1          else
   61   1          {
   62   2              Exp_Speed = 240-(Num2Abs(Ratio)/0.1)*15;  
   63   2          } 
   64   1      /************************************************ 圆环判别 **********************************************
             -*/ 
   65   1          
   66   1              if(ADC_proc[2] > 66 || ADC_proc[0] > 65 || ADC_proc[4] > 65) 
   67   1              {
   68   2              if(ADC_proc[0] + ADC_proc[4] >= 85 )
   69   2                  Circle_Flag1 = 1; 
   70   2          }    
   71   1      
   72   1      //    if(Dis_Process <= 50)           //幅值滤波（TOF读值会莫名跳变）
   73   1      //        Dis_Process = 810;
   74   1      //      if(Dis_Process < 400)           //测距值小于50cm，区分坡道，且只执行一次
   75   1      //              Circle_Delay1 = 100;        //延时0.5秒
   76   1          
   77   1      //      if(Circle_Delay1 > 0)                   //检测到坡道
   78   1      //      {
   79   1      //              Circle_Flag1 = 0;                       //清零环岛标志位                                                
   80   1      //              Circle_Delay1--;
   81   1      //      }
   82   1          Elem_Circle((Speed_L+Speed_R)/2,gz);   
   83   1      
   84   1      /*********************************避开路障***************************************/            
   85   1      
   86   1      //          if(Special_Elem >= 5)           //经过障碍前的某个元素（环岛，坡道），再开启避障
   87   1      //              Barrier_Executed = 0;
   88   1          if(Barrier_Executed == 0)
   89   1          {   
   90   2              if (Dis_Process < 880)                  //      检测到路障
   91   2                  Distance_Num++;
   92   2              else
   93   2                  Distance_Num = 0;
   94   2              if(Distance_Num >= 2)               //连续判别2次或以上
   95   2              {
   96   3                  Barrier_Flag1 = 1;
   97   3                  //x10_ms = 5;
   98   3                  Distance_Num = 0;
   99   3              }
  100   2              Elem_Barrier(gz,(Speed_L+Speed_R)/2);
  101   2          }
  102   1      
  103   1      
  104   1      /************************************************ 转向环计算 ********************************************
             -**/    
  105   1          
  106   1              Limit_Out(&Ratio,-0.9,0.9);   //限幅
  107   1              PID_Calculate(&Turn_PID,Ratio*150,gz/100);                              
  108   1              Limit_Out(&Turn_PID.PID_Out,-8000,8000);
  109   1          Exp_Speed *= Exp_Speed_gain;
  110   1              if(Ratio >= 0)  
  111   1              {
  112   2                      Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.09;
  113   2                      Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.08*(1-Ratio);
  114   2              }
  115   1              else
  116   1              {
  117   2                      Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.08*(1+Ratio);
  118   2                      Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.09;
  119   2              }
  120   1              
  121   1              PID_Incremental_Calc(&Left_Wheel,Exp_Speed_L,Speed_L);
C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 3   

  122   1              PID_Incremental_Calc(&Right_Wheel,Exp_Speed_R,Speed_R);
  123   1          
  124   1      /********************************************* 驶离赛道，撞到障碍，停车 *********************************
             -************/
  125   1              if(Speed_Delay > 0)         //刚启动时候给定一小段延时
  126   1              Speed_Delay --;
  127   1          
  128   1          if(Speed_Delay == 0 && abs(Speed_L) < 15 && abs(Speed_R) < 15)
  129   1                      Flag_Stop = 1;
  130   1          else if(abs(Speed_L) >= 15 || abs(Speed_R) >= 15)
  131   1             Flag_Stop = 0; 
  132   1          
  133   1      /********************************************* 设置左右PWM **********************************************
             -**/           
  134   1      
  135   1          if(Dis_Process < 120 || Flag_Stop == 1) 
  136   1              {
  137   2                      Act_PwmL = Left_SetSpeed(0);            
  138   2                      Act_PwmR = Right_SetSpeed(0);
  139   2              }
  140   1              else
  141   1              {
  142   2              Act_PwmL = Left_SetSpeed(Left_Wheel.out);
  143   2              Act_PwmR = Right_SetSpeed(Right_Wheel.out);
  144   2              }
  145   1      
  146   1              //蜂鸣器
  147   1              if(x10_ms > 0)
  148   1              {
  149   2                      pwm_duty(PWMB_CH4_P77,2000);
  150   2                      x10_ms--;
  151   2              }
  152   1              else
  153   1                      pwm_duty(PWMB_CH4_P77,0);
  154   1              
  155   1              //闪灯
  156   1          if(count > 50)
  157   1          {
  158   2                      LED = !LED;
  159   2                      count = 0;
  160   2          }
  161   1      
  162   1      }
  163          
  164          //对ADC值进行处理得到差比和
  165          void Get_Ratio(void)
  166          {    
  167   1          static float sum_01;
  168   1          static float sum_34;
  169   1          static float sum;
  170   1          
  171   1              sum_L = sqrt(ADC_proc[0]*ADC_proc[0]+ADC_proc[1]*ADC_proc[1]);
  172   1              sum_R = sqrt(ADC_proc[4]*ADC_proc[4]+ADC_proc[3]*ADC_proc[3]);
  173   1              Diff  = sum_L - sum_R;
  174   1              Plus  = sum_L + sum_R;
  175   1                 
  176   1          sum_01= ADC_proc[0] + ADC_proc[1];
  177   1          sum_34= ADC_proc[3] + ADC_proc[4];
  178   1          sum   = sum_01 + sum_34;
  179   1          
  180   1              if((sum > EDGE_PROTECT) && Barrier_Flag1 == 0)  
  181   1              {
  182   2                      Ratio = Diff/Plus;      //如果小于EDGE_PROTECT//视作丢线，下次偏差值
  183   2                      Flag_Out_L = 0;         //在上次基础上再次加（减）
  184   2                      Flag_Out_R = 0;
  185   2                      Edge_Delay= 0;
C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 4   

  186   2              }                                                                                                                                                       
  187   1              else                                                                                                                                            
  188   1              {
  189   2              if(ADC_proc[0] + ADC_proc[4] < 5) 
  190   2                  Flag_Stop = 1;
  191   2              //在避障阶段和环岛阶段以及上一次丢线未寻回前不做判断
  192   2                      else if(Barrier_Flag1 == 1 && Circle_Flag1 == 0 && Circle_Delay2 == 0 && Edge_Delay == 0)  
  193   2                      {
  194   3                 Edge_Delay = 100;    //50ms  
  195   3                 if(sum_01 >= sum_34 && Flag_Out_R == 0) 
  196   3                 {  
  197   4                       Flag_Out_L = 1;
  198   4                 } 
  199   3                 else if(sum_01 < sum_34 && Flag_Out_L == 0) 
  200   3                 {
  201   4                       Flag_Out_R = 1;
  202   4                 } 
  203   3              }
  204   2              }
  205   1      }
  206          
  207          
  208          
  209          
  210          
  211          
  212          
  213          
  214          
  215          
  216          
  217          
  218          
  219          
  220          
  221          
  222          
  223          
  224          
  225          
  226          //UART1中断
  227          void UART1_Isr() interrupt 4
  228          {
  229   1          uint8 res;
  230   1              static uint8 dwon_count;
  231   1          if(UART1_GET_TX_FLAG)
  232   1          {
  233   2              UART1_CLEAR_TX_FLAG;
  234   2              busy[1] = 0;
  235   2          }
  236   1          if(UART1_GET_RX_FLAG)
  237   1          {
  238   2              UART1_CLEAR_RX_FLAG;
  239   2              res = SBUF;
  240   2              //程序自动下载
  241   2              if(res == 0x7F)
  242   2              {
  243   3                  if(dwon_count++ > 20)
  244   3                      IAP_CONTR = 0x60;
  245   3              }
  246   2              else
  247   2              {
  248   3                  dwon_count = 0;
  249   3              }
  250   2          }
  251   1      }
C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 5   

  252          
  253          //UART2中断
  254          void UART2_Isr() interrupt 8
  255          {
  256   1          if(UART2_GET_TX_FLAG)
  257   1              {
  258   2              UART2_CLEAR_TX_FLAG;
  259   2                      busy[2] = 0;
  260   2              }
  261   1          if(UART2_GET_RX_FLAG)
  262   1              {
  263   2              UART2_CLEAR_RX_FLAG;
  264   2                      //接收数据寄存器为：S2BUF
  265   2      
  266   2              }
  267   1      }
  268          
  269          
  270          //UART3中断
  271          void UART3_Isr() interrupt 17
  272          {
  273   1          if(UART3_GET_TX_FLAG)
  274   1              {
  275   2              UART3_CLEAR_TX_FLAG;
  276   2                      busy[3] = 0;
  277   2              }
  278   1          if(UART3_GET_RX_FLAG)
  279   1              {
  280   2              UART3_CLEAR_RX_FLAG;
  281   2                      //接收数据寄存器为：S3BUF
  282   2      
  283   2              }
  284   1      }
  285          
  286          
  287          //UART4中断
  288          void UART4_Isr() interrupt 18
  289          {
  290   1          if(UART4_GET_TX_FLAG)
  291   1              {
  292   2              UART4_CLEAR_TX_FLAG;
  293   2                      busy[4] = 0;
  294   2              }
  295   1          if(UART4_GET_RX_FLAG)
  296   1              {
  297   2              UART4_CLEAR_RX_FLAG;
  298   2      
  299   2                      //接收数据寄存器为：S4BUF;
  300   2                      if(wireless_type == WIRELESS_SI24R1)
  301   2              {
  302   3                  wireless_uart_callback();           //无线转串口回调函数
  303   3              }
  304   2              else if(wireless_type == WIRELESS_CH9141)
  305   2              {
  306   3                  bluetooth_ch9141_uart_callback();   //蓝牙转串口回调函数
  307   3              }
  308   2              else if(wireless_type == WIRELESS_CH573)
  309   2              {
  310   3                  wireless_ch573_callback();          //CH573无线模块回调函数
  311   3              }
  312   2              }
  313   1      }
  314          
  315          #define LED P52
  316          void INT0_Isr() interrupt 0
  317          {
C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 6   

  318   1              LED = 0;        //点亮LED
  319   1      }
  320          void INT1_Isr() interrupt 2
  321          {
  322   1      
  323   1      }
  324          void INT2_Isr() interrupt 10
  325          {
  326   1              INT2_CLEAR_FLAG;  //清除中断标志
  327   1      }
  328          void INT3_Isr() interrupt 11
  329          {
  330   1              INT3_CLEAR_FLAG;  //清除中断标志
  331   1      }
  332          
  333          void INT4_Isr() interrupt 16
  334          {
  335   1              INT4_CLEAR_FLAG;  //清除中断标志
  336   1      }
  337          
  338          void TM0_Isr() interrupt 1
  339          {
  340   1      
  341   1      }
  342          void TM1_Isr() interrupt 3
  343          {
  344   1      
  345   1      }
  346          void TM2_Isr() interrupt 12
  347          {
  348   1              TIM2_CLEAR_FLAG;  //清除中断标志
  349   1              
  350   1      }
  351          void TM3_Isr() interrupt 19
  352          {
  353   1              TIM3_CLEAR_FLAG; //清除中断标志
  354   1              
  355   1      }
  356          
  357          
  358          //void  INT0_Isr()  interrupt 0;
  359          //void  TM0_Isr()   interrupt 1;
  360          //void  INT1_Isr()  interrupt 2;
  361          //void  TM1_Isr()   interrupt 3;
  362          //void  UART1_Isr() interrupt 4;
  363          //void  ADC_Isr()   interrupt 5;
  364          //void  LVD_Isr()   interrupt 6;
  365          //void  PCA_Isr()   interrupt 7;
  366          //void  UART2_Isr() interrupt 8;
  367          //void  SPI_Isr()   interrupt 9;
  368          //void  INT2_Isr()  interrupt 10;
  369          //void  INT3_Isr()  interrupt 11;
  370          //void  TM2_Isr()   interrupt 12;
  371          //void  INT4_Isr()  interrupt 16;
  372          //void  UART3_Isr() interrupt 17;
  373          //void  UART4_Isr() interrupt 18;
  374          //void  TM3_Isr()   interrupt 19;
  375          //void  TM4_Isr()   interrupt 20;
  376          //void  CMP_Isr()   interrupt 21;
  377          //void  I2C_Isr()   interrupt 24;
  378          //void  USB_Isr()   interrupt 25;
  379          //void  PWM1_Isr()  interrupt 26;
  380          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.60.0,  isr                                                                12/07/24  21:17:13  PAGE 7   

  code size            =      1521     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        98     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       115     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
