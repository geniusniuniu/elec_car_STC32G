C251 COMPILER V5.60.0,  motor                                                              17/07/24  13:01:42  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE motor
OBJECT MODULE PLACED IN .\Out_File\motor.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\motor.c XSMALL INTR2 WARNINGLEVEL(3) BROW
                    -SE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\US
                    -ER\inc;..\USER\src) DEBUG PRINT(.\Out_File\motor.lst) OBJECT(.\Out_File\motor.obj) 

stmt  level    source

    1          #include "zf_tim.h"
    2          #include "isr.h"
    3          #include <string.h>
    4          #include <stdio.h>
    5          #include "common.h"
    6          #include "Motor.h"
    7          #include "ZF_PWM.h"
    8          #include "zf_gpio.h"
    9          #include "PID.h"
   10          #include <STC32Gxx.H>
   11          
   12          float Speed_L,Speed_R;
   13          
   14          void Limit_Out(float *Output,float Limit_Min,float Limit_Max)
   15          {
   16   1          if (*Output <= Limit_Min) *Output = Limit_Min;
   17   1          else if (*Output >= Limit_Max) *Output = Limit_Max;
   18   1      }
   19          
   20          //#define Num2Abs(x)    ((x) < 0 ? -(x) : (x))
   21          float Num2Abs(float x)
   22          {
   23   1              if(x < 0)
   24   1                      return -x;
   25   1              return x;
   26   1      }
   27          
   28          void Motor_Init(void)//四路PWM信号控制两个电机
   29          {
   30   1              pwm_init(PWMA_CH1P_P60, 15000, 0);              //左电机-
   31   1          pwm_init(PWMA_CH2P_P62, 15000, 0);          //左电机-PWM
   32   1          
   33   1              pwm_init(PWMA_CH3P_P64, 15000, 0);              //右电机-
   34   1              pwm_init(PWMA_CH4P_P66, 15000, 0);              //右电机-PWM
   35   1      }
   36          
   37          float Left_SetSpeed(float speed)
   38          {
   39   1              static int16 Special_NumL = 0;  //异常情况记数
   40   1              if(Num2Abs(Speed_L) >= SPECIAL_SPEED)           //连续10次都超过最大速度，发生异常
   41   1                      Special_NumL++;
   42   1              else 
   43   1                      Special_NumL = 0;
   44   1              if(Special_NumL >= 10)                  //出现异常
   45   1              {
   46   2                      pwm_duty(PWMA_CH2P_P62, 0);
   47   2                      pwm_duty(PWMA_CH1P_P60, 0);
   48   2                      return 0;
   49   2              }
   50   1              else                             //没有出现异常
   51   1              {
   52   2                      if(speed >= SPEED_MAX)                  speed = SPEED_MAX; 
   53   2                      else if(speed <= -SPEED_MAX)    speed = -SPEED_MAX;
   54   2                      if(speed >= 0)
   55   2                      {
   56   3                              pwm_duty(PWMA_CH2P_P62, (int)speed);
   57   3                              pwm_duty(PWMA_CH1P_P60, 0);
C251 COMPILER V5.60.0,  motor                                                              17/07/24  13:01:42  PAGE 2   

   58   3                      } 
   59   2                      else if(speed < 0)
   60   2                      {
   61   3                              pwm_duty(PWMA_CH2P_P62, 0);
   62   3                              pwm_duty(PWMA_CH1P_P60, -(int)speed);
   63   3                      } 
   64   2                      return speed;
   65   2              }
   66   1      }
   67          
   68          float Right_SetSpeed(float speed)       
   69          {
   70   1              static int16 Special_NumR = 0;  //异常情况记数
   71   1              if(Num2Abs(Speed_R) >= SPECIAL_SPEED)           //连续10次都超过最大速度，发生异常
   72   1                      Special_NumR++;
   73   1              else 
   74   1                      Special_NumR = 0;
   75   1              if(Special_NumR >= 10)                  //出现异常
   76   1              {
   77   2                      pwm_duty(PWMA_CH3P_P64, 0);
   78   2                      pwm_duty(PWMA_CH4P_P66, 0);
   79   2                      return 0;
   80   2              }
   81   1          else
   82   1              {
   83   2                      if(speed >= SPEED_MAX)                  speed = SPEED_MAX; 
   84   2                      else if(speed <= -SPEED_MAX)    speed = -SPEED_MAX;
   85   2                      if(speed >= 0)
   86   2                      {
   87   3                              pwm_duty(PWMA_CH3P_P64, (int)speed);
   88   3                              pwm_duty(PWMA_CH4P_P66, 0);
   89   3                      } 
   90   2                      else if(speed < 0)
   91   2                      {
   92   3                              pwm_duty(PWMA_CH3P_P64, 0);
   93   3                              pwm_duty(PWMA_CH4P_P66, -(int)speed);
   94   3                      } 
   95   2                      return speed;
   96   2              }
   97   1      }
   98          
   99          void Get_Speed(void)    //获取速度
  100          {
  101   1              static float Speed_L_Last;
  102   1              static float Speed_R_Last;
  103   1              if(P53 == 0)             Speed_L = ctimer_count_read(CTIM3_P04);        ////左轮方向读取数值
  104   1              else                            {Speed_L = ctimer_count_read(CTIM3_P04); Speed_L = -Speed_L;}
  105   1              ctimer_count_clean(CTIM3_P04);                                                                  //清除计数值，开始下一轮计数
  106   1      
  107   1              
  108   1              if(P35 == 1)             Speed_R = ctimer_count_read(CTIM0_P34);                //右轮方向读取数值
  109   1              else                            {Speed_R = ctimer_count_read(CTIM0_P34); Speed_R = -Speed_R;}
  110   1              ctimer_count_clean(CTIM0_P34);                                                                  //清除计数值，开始下一轮计数
  111   1              
  112   1              Speed_L = Speed_L_Last*0.7 + Speed_L*0.3;
  113   1              Speed_R = Speed_R_Last*0.7 + Speed_R*0.3;
  114   1              Speed_L_Last = Speed_L;
  115   1              Speed_R_Last = Speed_R;
  116   1              
  117   1      }
  118          
  119          
  120          void Motor_Test(float Speed)
  121          {
  122   1              Right_SetSpeed(-Speed);
  123   1              Left_SetSpeed(Speed);   
C251 COMPILER V5.60.0,  motor                                                              17/07/24  13:01:42  PAGE 3   

  124   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       716     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        20          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        12     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
