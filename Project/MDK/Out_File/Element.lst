C251 COMPILER V5.60.0,  Element                                                            12/07/24  21:11:43  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          #include "isr.h"
   11          
   12          extern float Ratio;
   13          extern float ADC_proc[5];
   14          
   15          //下坡标志位
   16          char Down_Flag = 0;
   17          
   18          //环岛标志位
   19          float Circle_Flag1 = 0;  // 左右环岛标志位
   20          float Circle_Flag2 = 0;
   21          
   22          
   23          //出环延时
   24          int circle_Delay1 = 0;
   25          int Circle_Delay2 = 0;
   26          
   27          //记录元素个数
   28          char Special_Elem = 0;
   29          
   30          
   31          void Elem_Up_Down(float Angle)  
   32          {
   33   1          static char Elem_Over;
   34   1              if(Angle > 5.5)          //上坡
   35   1                      Exp_Speed = 320;
   36   1              else if(Angle < -10)  //下坡
   37   1          {
   38   2              Down_Flag = 5;
   39   2              if(Elem_Over == 0)
   40   2              {
   41   3                  Elem_Over=1;
   42   3                  Special_Elem++;
   43   3              }
   44   2          }
   45   1          
   46   1      }
   47          
   48          
   49          //障碍物识别   
   50          char Barrier_Executed = 1;
   51          char Barrier_Flag1 = 0;
   52          void Elem_Barrier_Timer(void)  
   53          {
   54   1              static float Barrier_Timer;     
   55   1              #if BARRIER_DIR == 0                                            //向右避障
   56   1                      if(Barrier_Flag1 == 1)                                  //识别到障碍物
   57   1                      {
C251 COMPILER V5.60.0,  Element                                                            12/07/24  21:11:43  PAGE 2   

   58   2                  Exp_Speed = 220;
   59   2                              Barrier_Timer--;
   60   2                              if(Barrier_Timer > 90)
   61   2                                      Ratio = -0.235;
   62   2                              else if(Barrier_Timer > 30 && Barrier_Timer <= 90)
   63   2                                      Ratio = 0.5;
   64   2                              else 
   65   2                                      Ratio -= 0.06;
   66   2                              if(Barrier_Timer == 0)
   67   2                              {
   68   3                                      Barrier_Flag1 = 0;
   69   3                                      Barrier_Executed = 1;
   70   3                      Special_Elem = 0;
   71   3                              }
   72   2                      }
   73   1                      else
   74   1                              Barrier_Timer = 130;
   75   1              #elif BARRIER_DIR == 1  
                               //向左避障
                               if(Barrier_Flag1 == 1)                                  //识别到障碍物
                               {
                           Exp_Speed = 220;
                                       Barrier_Timer--;
                                       if(Barrier_Timer > 70)
                                               Ratio = 0.49;
                                       else if(Barrier_Timer > 18 && Barrier_Timer <= 70)
                                               Ratio = -0.43;
                                       else 
                                               Ratio += 0.04;
                                       if(Barrier_Timer == 0)
                                       {
                                               Barrier_Flag1 = 0;
                                               Barrier_Executed = 1;
                               Special_Elem = 0;
                                       }
                               }
                               else
                                       Barrier_Timer = 120;
                               
                       #endif
   98   1      }
   99          
  100          
  101          char Barrier_Flag2 = 0;
  102          char Barrier_Flag3 = 0;
  103          float Dis_Bar = 0;
  104          float Sum_Angle_Bar = 0;
  105          void Elem_Barrier(float Gyro_Z,float Speed)
  106          {
  107   1              Gyro_Z = (Gyro_Z*2000)/32768;   
  108   1          
  109   1              #if BARRIER_DIR == 0                //向右避障
  110   1                      if(Barrier_Flag1==1)        
  111   1                      {
  112   2                  Sum_Angle_Bar += Gyro_Z*0.005;
  113   2                  Dis_Bar += Speed;
  114   2                              Ratio = -0.38;                  
  115   2      
  116   2                      }
  117   1                      if(Sum_Angle_Bar < -23 && Dis_Bar > 4000) 
  118   1                      {
  119   2                              Barrier_Flag1 = 0;   
  120   2                              Barrier_Flag2 = 1;
  121   2                      }
  122   1                      if(Barrier_Flag2 == 1)      //左拐
  123   1                      {   
C251 COMPILER V5.60.0,  Element                                                            12/07/24  21:11:43  PAGE 3   

  124   2                  Sum_Angle_Bar += Gyro_Z*0.005;
  125   2                  Dis_Bar += Speed;
  126   2                              if(Sum_Angle_Bar > 20 && Dis_Bar > 8500)  
  127   2                              {
  128   3                      Barrier_Flag3 = 1;  //回正标志位                   
  129   3                              }
  130   2                              else                //回正
  131   2                                      Ratio = 0.395; 
  132   2                      }
  133   1                      if(Barrier_Flag3 == 1)          //回正后标志位清零
  134   1              {
  135   2                  Sum_Angle_Bar = 0;
  136   2                  Dis_Bar = 0;
  137   2                  Barrier_Flag1 = 0;            
  138   2                  Barrier_Flag2 = 0;
  139   2                  Barrier_Executed = 1;
  140   2                  
  141   2                  Barrier_Flag3 = 0;
  142   2                      }
  143   1          #elif BARRIER_DIR == 1               //向左避障
                       if(Barrier_Flag1==1)        
                       {
                           Ratio = 0.32 ;          
                           Dis += Speed;
                       }
                       if(Sum_Angle > 20 && Dis > 4000) 
                       {
                           Barrier_Flag1 = 0;     
                           Barrier_Flag2 = 1;
                       }
                       if(Barrier_Flag2 == 1)      //右拐
                       {   
                           if(Sum_Angle > -2 && Dis < 7000)  
                           {
                               Ratio = -0.35;      
                           }
                           else                  //回正
                               Barrier_Flag3 = 1;  //回正标志位
                       }
               
                       if(Barrier_Flag3 == 1)        //回正后标志位清零
                       {
                           Sum_Angle = 0;
                           Barrier_Flag1 = 0;          
                           Barrier_Flag2 = 0;
                           Barrier_Executed = 1;
                               
                           Barrier_Flag3 = 0;
                       }
                  #endif       
  174   1      }
  175          
  176          
  177          
  178          char Circle_Flag3 = 0;
  179          
  180          void Elem_Circle(float Speed,float Gyro_Z)
  181          {
  182   1          static char Elem_Over;
  183   1              static float Sum_Dis1 = 0;
  184   1          static float Sum_Angle_C1 = 0;
  185   1              if(Circle_Delay2 > 0)                                   //出环，清除标志位
  186   1              {
  187   2                      Circle_Flag1 = 0;
  188   2                      Circle_Flag2 = 0;
  189   2                      if(Circle_Flag3 == LEFT_CIRCLE)         //用来记录出环时的方向
C251 COMPILER V5.60.0,  Element                                                            12/07/24  21:11:43  PAGE 4   

  190   2                              Ratio -= 0.05;
  191   2                      else if(Circle_Flag3 == RIGHT_CIRCLE)
  192   2                              Ratio += 0.05;
  193   2                      Circle_Delay2--;
  194   2                      return ;                                                //退出函数
  195   2              }
  196   1      
  197   1              if(Circle_Flag1 == 1)                                       //识别到环岛
  198   1              {
  199   2             Gyro_Z = (Gyro_Z*2000)/32768;       
  200   2                      if(Sum_Dis1 > DIS_ROUND_IN)                         //路程积分，积满进环
  201   2                      {
  202   3                              Sum_Angle_C1 += Gyro_Z * 0.005;     //进环开始角度积分
  203   3                  //标志位未清零时只置位一次，防止重复识别
  204   3                              if(Circle_Flag2 == 0 && (ADC_proc[1]+ ADC_proc[0] >= ADC_proc[3]+ADC_proc[4]))
  205   3                              {
  206   4                                      Circle_Flag2 = LEFT_CIRCLE;     //判为左环岛
  207   4                                      x10_ms = 13;
  208   4                              }
  209   3                              else if(Circle_Flag2 == 0 && (ADC_proc[1]+ ADC_proc[0] < ADC_proc[3]+ADC_proc[4]))
  210   3                              {
  211   4                                      Circle_Flag2 = RIGHT_CIRCLE;
  212   4                                      x10_ms = 13;
  213   4                              }
  214   3                              
  215   3                              Circle_Flag3 = Circle_Flag2;            //临时变量记录方向
  216   3                              
  217   3                              if(Sum_Angle_C1 < 24 && Circle_Flag2 == LEFT_CIRCLE )   //角度未积满，固定偏差值
  218   3                              {
  219   4                      Ratio = 0.34;  
  220   4                  }
  221   3                              else if(Sum_Angle_C1 > -24 && Circle_Flag2 == RIGHT_CIRCLE)
  222   3                              {
  223   4                      Ratio = -0.34;
  224   4                  }
  225   3                      }
  226   2                      else
  227   2                              Sum_Dis1 += Speed;
  228   2                      
  229   2                      if(Sum_Angle_C1 > ROUND_L || Sum_Angle_C1 < ROUND_R )              //出环条件之一，角度积分够
             -大
  230   2                      {
  231   3                              if(ADC_proc[0] > 61 || ADC_proc[4] > 61 || ADC_proc[2] > 64)   //预出环 防止误判再次入环
  232   3                              {
  233   4                      Circle_Delay2 = 120;   //延时1000ms
  234   4                                      Sum_Dis1 = 0;
  235   4                                      Sum_Angle_C1 = 0;
  236   4                                      Circle_Flag2 = 0;
  237   4                      if(Elem_Over == 0)
  238   4                      {
  239   5                          Elem_Over = 1;
  240   5                          Special_Elem++;
  241   5                      }
  242   4                              }
  243   3                      }
  244   2              }
  245   1              else
  246   1              {
  247   2                      Sum_Dis1 = 0;
  248   2                      Sum_Angle_C1 = 0;
  249   2                      Circle_Flag2 = 0;
  250   2              }
  251   1      }


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.60.0,  Element                                                            12/07/24  21:11:43  PAGE 5   

  code size            =       977     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        41     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        95     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
