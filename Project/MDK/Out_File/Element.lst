C251 COMPILER V5.60.0,  Element                                                            11/07/24  19:11:21  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          #include "isr.h"
   11          
   12          extern float Ratio;
   13          extern float ADC_proc[5];
   14          
   15          //下坡标志位
   16          char Down_Flag = 0;
   17          
   18          //环岛标志位
   19          float Circle_Flag1 = 0;  // 左右环岛标志位
   20          float Circle_Flag2 = 0;
   21          
   22          
   23          //出环延时
   24          int circle_Delay1 = 0;
   25          int Circle_Delay2 = 0;
   26          
   27          //记录元素个数
   28          char Special_Elem = 0;
   29          
   30          
   31          void Elem_Up_Down(float Angle)  
   32          {
   33   1          static char Elem_Over;
   34   1              if(Angle > 5.5)          //上坡
   35   1                      Exp_Speed = 320;
   36   1              else if(Angle < -10)  //下坡
   37   1          {
   38   2              Down_Flag = 5;
   39   2              if(Elem_Over == 0)
   40   2              {
   41   3                  Elem_Over=1;
   42   3                  Special_Elem++;
   43   3              }
   44   2          }
   45   1          
   46   1      }
   47          
   48          
   49          //障碍物识别   
   50          char Barrier_Executed = 0;
   51          char Barrier_Flag1 = 0;
   52          void Elem_Barrier_Timer(void)  
   53          {
   54   1              static float Barrier_Timer;     
   55   1              #if BARRIER_DIR == 0                                            //向右避障
                               if(Barrier_Flag1 == 1)                                  //识别到障碍物
                               {
C251 COMPILER V5.60.0,  Element                                                            11/07/24  19:11:21  PAGE 2   

                           Exp_Speed = 220;
                                       Barrier_Timer--;
                                       if(Barrier_Timer > 90)
                                               Ratio = -0.235;
                                       else if(Barrier_Timer > 30 && Barrier_Timer <= 90)
                                               Ratio = 0.5;
                                       else 
                                               Ratio -= 0.06;
                                       if(Barrier_Timer == 0)
                                       {
                                               Barrier_Flag1 = 0;
                                               Barrier_Executed = 1;
                               Special_Elem = 0;
                                       }
                               }
                               else
                                       Barrier_Timer = 130;
                       #elif BARRIER_DIR == 1  
   76   1                      //向左避障
   77   1                      if(Barrier_Flag1 == 1)                                  //识别到障碍物
   78   1                      {
   79   2                  Exp_Speed = 220;
   80   2                              Barrier_Timer--;
   81   2                              if(Barrier_Timer > 70)
   82   2                                      Ratio = 0.49;
   83   2                              else if(Barrier_Timer > 18 && Barrier_Timer <= 70)
   84   2                                      Ratio = -0.43;
   85   2                              else 
   86   2                                      Ratio += 0.04;
   87   2                              if(Barrier_Timer == 0)
   88   2                              {
   89   3                                      Barrier_Flag1 = 0;
   90   3                                      Barrier_Executed = 1;
   91   3                      Special_Elem = 0;
   92   3                              }
   93   2                      }
   94   1                      else
   95   1                              Barrier_Timer = 120;
   96   1                      
   97   1              #endif
   98   1      }
   99          
  100          char Circle_Flag3 = 0;
  101          
  102          void Elem_Circle(float Speed,float Gyro_Z)
  103          {
  104   1          static char Elem_Over;
  105   1              static float Sum_Dis1 = 0;
  106   1          static float Sum_Angle_C1 = 0;
  107   1              if(Circle_Delay2 > 0)                                   //出环，清除标志位
  108   1              {
  109   2                      Circle_Flag1 = 0;
  110   2                      Circle_Flag2 = 0;
  111   2                      if(Circle_Flag3 == LEFT_CIRCLE)         //用来记录出环时的方向
  112   2                              Ratio -= 0.05;
  113   2                      else if(Circle_Flag3 == RIGHT_CIRCLE)
  114   2                              Ratio += 0.05;
  115   2                      Circle_Delay2--;
  116   2                      return ;                                                //退出函数
  117   2              }
  118   1      
  119   1              if(Circle_Flag1 == 1)                                       //识别到环岛
  120   1              {
  121   2             Gyro_Z = (Gyro_Z*2000)/32768;       
  122   2                      if(Sum_Dis1 > DIS_ROUND_IN)                         //路程积分，积满进环
  123   2                      {
C251 COMPILER V5.60.0,  Element                                                            11/07/24  19:11:21  PAGE 3   

  124   3                              Sum_Angle_C1 += Gyro_Z * 0.005;     //进环开始角度积分
  125   3                  //标志位未清零时只置位一次，防止重复识别
  126   3                              if(Circle_Flag2 == 0 && (ADC_proc[1]+ ADC_proc[0] >= ADC_proc[3]+ADC_proc[4]))
  127   3                              {
  128   4                                      Circle_Flag2 = LEFT_CIRCLE;     //判为左环岛
  129   4                                      x10_ms = 13;
  130   4                              }
  131   3                              else if(Circle_Flag2 == 0 && (ADC_proc[1]+ ADC_proc[0] < ADC_proc[3]+ADC_proc[4]))
  132   3                              {
  133   4                                      Circle_Flag2 = RIGHT_CIRCLE;
  134   4                                      x10_ms = 13;
  135   4                              }
  136   3                              
  137   3                              Circle_Flag3 = Circle_Flag2;            //临时变量记录方向
  138   3                              
  139   3                              if(Sum_Angle_C1 < 24 && Circle_Flag2 == LEFT_CIRCLE )   //角度未积满，固定偏差值
  140   3                              {
  141   4                      Ratio = 0.34;  
  142   4                  }
  143   3                              else if(Sum_Angle_C1 > -24 && Circle_Flag2 == RIGHT_CIRCLE)
  144   3                              {
  145   4                      Ratio = -0.34;
  146   4                  }
  147   3                      }
  148   2                      else
  149   2                              Sum_Dis1 += Speed;
  150   2                      
  151   2                      if(Sum_Angle_C1 > ROUND_L || Sum_Angle_C1 < ROUND_R )              //出环条件之一，角度积分够
             -大
  152   2                      {
  153   3                              if(ADC_proc[0] > 61 || ADC_proc[4] > 61 || ADC_proc[2] > 64)   //预出环 防止误判再次入环
  154   3                              {
  155   4                      Circle_Delay2 = 120;   //延时1000ms
  156   4                                      Sum_Dis1 = 0;
  157   4                                      Sum_Angle_C1 = 0;
  158   4                                      Circle_Flag2 = 0;
  159   4                      if(Elem_Over == 0)
  160   4                      {
  161   5                          Elem_Over = 1;
  162   5                          Special_Elem++;
  163   5                      }
  164   4                              }
  165   3                      }
  166   2              }
  167   1              else
  168   1              {
  169   2                      Sum_Dis1 = 0;
  170   2                      Sum_Angle_C1 = 0;
  171   2                      Circle_Flag2 = 0;
  172   2              }
  173   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       726     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        31     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
C251 COMPILER V5.60.0,  Element                                                            11/07/24  19:11:21  PAGE 4   

  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        69     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
