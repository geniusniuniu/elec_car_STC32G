C251 COMPILER V5.60.0,  Element                                                            16/07/24  17:28:54  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          #include "isr.h"
   11          
   12          extern float Ratio;
   13          extern float ADC_proc[5];
   14          
   15          //下坡标志位
   16          char Down_Flag = 0;
   17          
   18          //环岛标志位
   19          float Circle_Flag1 = 0;  // 左右环岛标志位
   20          float Circle_Flag2 = 0;
   21          
   22          
   23          //出环延时
   24          int circle_Delay1 = 0;
   25          int Circle_Delay2 = 0;
   26          
   27          //记录元素个数
   28          char Special_Elem = 0;
   29          
   30          
   31          void Elem_Up_Down(float Angle)  
   32          {
   33   1          static char Elem_Over;
   34   1              if(Angle > 5.5)          //上坡
   35   1                      Exp_Speed = 320;
   36   1              else if(Angle < -10)  //下坡
   37   1          {
   38   2              Down_Flag = 5;
   39   2              if(Elem_Over == 0)
   40   2              {
   41   3                  Elem_Over=1;
   42   3                  Special_Elem++;
   43   3              }
   44   2          }
   45   1          
   46   1      }
   47          
   48          
   49          //障碍物识别   
   50          char Barrier_Executed = 1;
   51          char Barrier_Flag1 = 0;
   52          //void Elem_Barrier_Timer(void)  
   53          //{
   54          //      static float Barrier_Timer;     
   55          //      #if BARRIER_DIR == 0                                            //向右避障
   56          //              if(Barrier_Flag1 == 1)                                  //识别到障碍物
   57          //              {
C251 COMPILER V5.60.0,  Element                                                            16/07/24  17:28:54  PAGE 2   

   58          //            Exp_Speed = 220;
   59          //                      Barrier_Timer--;
   60          //                      if(Barrier_Timer > 90)
   61          //                              Ratio = -0.235;
   62          //                      else if(Barrier_Timer > 30 && Barrier_Timer <= 90)
   63          //                              Ratio = 0.5;
   64          //                      else 
   65          //                              Ratio -= 0.06;
   66          //                      if(Barrier_Timer == 0)
   67          //                      {
   68          //                              Barrier_Flag1 = 0;
   69          //                              Barrier_Executed = 1;
   70          //                Special_Elem = 0;
   71          //                      }
   72          //              }
   73          //              else
   74          //                      Barrier_Timer = 130;
   75          //      #elif BARRIER_DIR == 1  
   76          //              //向左避障
   77          //              if(Barrier_Flag1 == 1)                                  //识别到障碍物
   78          //              {
   79          //            Exp_Speed = 220;
   80          //                      Barrier_Timer--;
   81          //                      if(Barrier_Timer > 70)
   82          //                              Ratio = 0.49;
   83          //                      else if(Barrier_Timer > 18 && Barrier_Timer <= 70)
   84          //                              Ratio = -0.43;
   85          //                      else 
   86          //                              Ratio += 0.04;
   87          //                      if(Barrier_Timer == 0)
   88          //                      {
   89          //                              Barrier_Flag1 = 0;
   90          //                              Barrier_Executed = 1;
   91          //                Special_Elem = 0;
   92          //                      }
   93          //              }
   94          //              else
   95          //                      Barrier_Timer = 120;
   96          //              
   97          //      #endif
   98          //}
   99          
  100          
  101          char Barrier_Flag2 = 0;
  102          char Barrier_Flag3 = 0;
  103          float Dis_Bar = 0;
  104          float Sum_Angle_Bar = 0;
  105          void Elem_Barrier(float Gyro_Z,float Speed)
  106          {
  107   1              Gyro_Z = (Gyro_Z*2000)/32768;   
  108   1          
  109   1              #if BARRIER_DIR == 0                //向右避障
                               if(Barrier_Flag1==1)        
                               {
                           Sum_Angle_Bar += Gyro_Z*0.005;
                           Dis_Bar += Speed;
                                       Ratio = -0.385;                 
               
                               }
                               if(Sum_Angle_Bar < -23 && Dis_Bar > 4000) 
                               {
                                       Barrier_Flag1 = 0;   
                                       Barrier_Flag2 = 1;
                               }
                               if(Barrier_Flag2 == 1)      //左拐
                               {   
C251 COMPILER V5.60.0,  Element                                                            16/07/24  17:28:54  PAGE 3   

                           Sum_Angle_Bar += Gyro_Z*0.005;
                           Dis_Bar += Speed;
                                       if(Sum_Angle_Bar > 21 && Dis_Bar > 8000)  
                                       {
                               Barrier_Flag3 = 1;  //回正标志位                   
                                       }
                                       else                //回正
                                               Ratio = 0.395; 
                               }
                   #elif BARRIER_DIR == 1               //向左避障
  134   1                      if(Barrier_Flag1==1)        
  135   1                      {
  136   2                  Sum_Angle_Bar += Gyro_Z*0.005;
  137   2                  Dis_Bar += Speed;
  138   2                              Ratio = 0.425;                  
  139   2      
  140   2                      }
  141   1                      if(Sum_Angle_Bar > 23 && Dis_Bar > 4000) 
  142   1                      {
  143   2                              Barrier_Flag1 = 0;   
  144   2                              Barrier_Flag2 = 1;
  145   2                      }
  146   1                      if(Barrier_Flag2 == 1)      //右拐
  147   1                      {   
  148   2                  Sum_Angle_Bar += Gyro_Z*0.005;
  149   2                  Dis_Bar += Speed;
  150   2                              if(Sum_Angle_Bar < -22 && Dis_Bar > 8000)  
  151   2                              {
  152   3                      Barrier_Flag3 = 1;  //回正标志位                   
  153   3                              }
  154   2                              else                //回正
  155   2                                      Ratio = -0.395; 
  156   2                      }
  157   1         #endif
  158   1              
  159   1          if(Barrier_Flag3 == 1)              //回正后标志位清零
  160   1          {
  161   2              Sum_Angle_Bar = 0;
  162   2              Dis_Bar = 0;
  163   2              Barrier_Flag1 = 0;            
  164   2              Barrier_Flag2 = 0;
  165   2              Barrier_Executed = 1;
  166   2              
  167   2              Barrier_Flag3 = 0;
  168   2          }        
  169   1      }
  170          
  171          
  172          
  173          char Circle_Flag3 = 0;
  174          
  175          void Elem_Circle(float Speed,float Gyro_Z)
  176          {
  177   1          static char Elem_Over;
  178   1              static float Sum_Dis1 = 0;
  179   1          static float Sum_Angle_C1 = 0;
  180   1              if(Circle_Delay2 > 0)                                   //出环，清除标志位
  181   1              {
  182   2                      Circle_Flag1 = 0;
  183   2                      Circle_Flag2 = 0;
  184   2                      if(Circle_Flag3 == LEFT_CIRCLE)         //用来记录出环时的方向
  185   2                              Ratio -= 0.05;
  186   2                      else if(Circle_Flag3 == RIGHT_CIRCLE)
  187   2                              Ratio += 0.05;
  188   2                      Circle_Delay2--;
  189   2                      return ;                                                //退出函数
C251 COMPILER V5.60.0,  Element                                                            16/07/24  17:28:54  PAGE 4   

  190   2              }
  191   1      
  192   1              if(Circle_Flag1 == 1)                                       //识别到环岛
  193   1              {
  194   2             Gyro_Z = (Gyro_Z*2000)/32768;       
  195   2                      if(Sum_Dis1 > DIS_ROUND_IN)                         //路程积分，积满进环
  196   2                      {
  197   3                              Sum_Angle_C1 += Gyro_Z * 0.005;     //进环开始角度积分
  198   3                  //标志位未清零时只置位一次，防止重复识别
  199   3                              if(Circle_Flag2 == 0 && (ADC_proc[1]+ ADC_proc[0] >= ADC_proc[3]+ADC_proc[4]))
  200   3                              {
  201   4                                      Circle_Flag2 = LEFT_CIRCLE;     //判为左环岛
  202   4                                      x10_ms = 13;
  203   4                              }
  204   3                              else if(Circle_Flag2 == 0 && (ADC_proc[1]+ ADC_proc[0] < ADC_proc[3]+ADC_proc[4]))
  205   3                              {
  206   4                                      Circle_Flag2 = RIGHT_CIRCLE;
  207   4                                      x10_ms = 13;
  208   4                              }
  209   3                              
  210   3                              Circle_Flag3 = Circle_Flag2;            //临时变量记录方向
  211   3                              
  212   3                              if(Sum_Angle_C1 < 24 && Circle_Flag2 == LEFT_CIRCLE )   //角度未积满，固定偏差值
  213   3                              {
  214   4                      Ratio = 0.34;  
  215   4                  }
  216   3                              else if(Sum_Angle_C1 > -24 && Circle_Flag2 == RIGHT_CIRCLE)
  217   3                              {
  218   4                      Ratio = -0.34;
  219   4                  }
  220   3                      }
  221   2                      else
  222   2                              Sum_Dis1 += Speed;
  223   2                      
  224   2                      if(Sum_Angle_C1 > ROUND_L || Sum_Angle_C1 < ROUND_R )              //出环条件之一，角度积分够
             -大
  225   2                      {
  226   3                              if(ADC_proc[0] > 61 || ADC_proc[4] > 61 || ADC_proc[2] > 64)   //预出环 防止误判再次入环
  227   3                              {
  228   4                      Circle_Delay2 = 140;   //延时1000ms
  229   4                                      Sum_Dis1 = 0;
  230   4                                      Sum_Angle_C1 = 0;
  231   4                      //Circle_Flag1 = 0;
  232   4                                      Circle_Flag2 = 0;
  233   4                      if(Elem_Over == 0)
  234   4                      {
  235   5                          Elem_Over = 1;
  236   5                          Special_Elem++;
  237   5                      }
  238   4                              }
  239   3                      }
  240   2              }
  241   1              else
  242   1              {
  243   2                      Sum_Dis1 = 0;
  244   2                      Sum_Angle_C1 = 0;
  245   2                      Circle_Flag2 = 0;
  246   2              }
  247   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       826     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  Element                                                            16/07/24  17:28:54  PAGE 5   

  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        37     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        95     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
