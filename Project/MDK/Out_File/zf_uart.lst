C251 COMPILER V5.60.0,  zf_uart                                                            13/07/24  18:02:20  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_uart
OBJECT MODULE PLACED IN .\Out_File\zf_uart.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_uart.c XSMA
                    -LL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seek
                    -free_peripheral;..\CODE;..\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\zf_uart.lst) OBJECT(.\Out_File\zf_uart.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                uart
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "zf_uart.h"
   21          #include "board.h"
   22             
   23          
   24          
   25          uint8 busy[5];                           //接收忙标志位
   26          
   27          uint8 uart1_tx_buff[UART1_TX_BUFFER_SIZE];      //发送缓冲
   28          uint8 uart1_rx_buff[UART1_RX_BUFFER_SIZE];      //接收缓冲
   29          
   30          
   31          //-------------------------------------------------------------------------------------------------------
             -------------
   32          //  @brief      串口初始化
   33          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
   34          //  @param      uart_rx_pin     串口接收引脚
   35          //  @param      uart_tx_pin     串口发送引脚
   36          //  @param      baud                    串口波特率
   37          //  @param      tim_n                   使用tim_n作为串口波特率发生器(TIM1-TIM4)
   38          //  @return     NULL            
   39          //  Sample usage:               uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);        //初
             -始化串口1 波特率115200 发送引脚使用P31 接收引脚使用P30 ,使用定时器2作为波特率发生器
   40          //  @note                       串口1使用 定时器1或者定时器2 作为波特率发生器。
   41          //                                                              串口2使用 定时器2                        作为波特率发生器。
   42          //                                                              串口3使用 定时器3或者定时器2 作为波特率发生器。
   43          //                                                              串口4使用 定时器4或者定时器2 作为波特率发生器。
   44          //                              STC32G仅有 定时器0-定时器4，这5个定时器。
   45          //                                                              编码器采集数据也需要定时器作为外部计数。
   46          //                                                              如果不同的串口，使用同一个定时器，串口的波特率以最后一个初始化为准
   47          //-------------------------------------------------------------------------------------------------------
             -------------
   48          void uart_init(UARTN_enum uart_n, UARTPIN_enum uart_rx_pin, UARTPIN_enum uart_tx_pin, uint32 baud, TIMN_e
             -num tim_n)
   49          {
   50   1          uint16 brt;
   51   1      
C251 COMPILER V5.60.0,  zf_uart                                                            13/07/24  18:02:20  PAGE 2   

   52   1              brt = (uint16)(65536 - (sys_clk/baud/4));
   53   1      
   54   1      
   55   1              switch(uart_n)
   56   1              {
   57   2                      case UART_1:
   58   2                      {
   59   3                              if(TIM_1 == tim_n)
   60   3                              {
   61   4                                      SCON |= 0x50;
   62   4                                      TMOD |= 0x00;
   63   4                                      TL1 = brt;
   64   4                                      TH1 = brt >> 8;
   65   4                                      AUXR |= 0x40;
   66   4                                      TR1 = 1;
   67   4                                      busy[1] = 0;
   68   4                              }
   69   3                              else if(TIM_2 == tim_n)
   70   3                              {
   71   4                                      SCON |= 0x50;
   72   4                                      T2L = brt;
   73   4                                      T2H = brt >> 8;
   74   4                                      AUXR |= 0x15;
   75   4                              }
   76   3                              P_SW1 &= ~(0x03<<6);
   77   3                              if((UART1_RX_P30 == uart_rx_pin) && (UART1_TX_P31 == uart_tx_pin))
   78   3                              {
   79   4                                      P_SW1 |= 0x00;
   80   4                              }
   81   3                              else if((UART1_RX_P36 == uart_rx_pin) && (UART1_TX_P37 == uart_tx_pin))
   82   3                              {
   83   4                                      P_SW1 |= 0x40;
   84   4                              }
   85   3                              else if((UART1_RX_P16 == uart_rx_pin) && (UART1_TX_P17 == uart_tx_pin))
   86   3                              {
   87   4                                      P_SW1 |= 0x80;
   88   4                              }
   89   3                              else if((UART1_RX_P43 == uart_rx_pin) && (UART1_TX_P44 == uart_tx_pin))
   90   3                              {
   91   4                                      P_SW1 |= 0xc0;
   92   4                              }
   93   3                              busy[1] = 0;
   94   3                              ES = 1;
   95   3                              break;
   96   3                      }
   97   2                      
   98   2                      case UART_2:
   99   2                      {
  100   3                              if(TIM_2 == tim_n)
  101   3                              {
  102   4                                      S2CON |= 0x10;
  103   4                                      T2L = brt;
  104   4                                      T2H = brt >> 8;
  105   4                                      AUXR |= 0x14;
  106   4                              }
  107   3                              
  108   3                              P_SW2 &= ~(0x01<<0);
  109   3                              if((UART2_RX_P10 == uart_rx_pin) && (UART2_TX_P11 == uart_tx_pin))
  110   3                              {
  111   4                                      P_SW2 |= 0x00;
  112   4                              }
  113   3                              else if((UART2_RX_P46 == uart_rx_pin) && (UART2_TX_P47 == uart_tx_pin))
  114   3                              {
  115   4                                      P_SW2 |= 0x01;
  116   4                              }
  117   3                              
C251 COMPILER V5.60.0,  zf_uart                                                            13/07/24  18:02:20  PAGE 3   

  118   3                              IE2 |= 0x01 << 0;       //允许串行口2中断
  119   3                              busy[2] = 0;
  120   3                              break;
  121   3                      }
  122   2                      
  123   2                      case UART_3:
  124   2                      {
  125   3                              if(TIM_2 == tim_n)
  126   3                              {
  127   4                                      S3CON |= 0x10;
  128   4                                      T2L = brt;
  129   4                                      T2H = brt >> 8;
  130   4                                      AUXR |= 0x14;
  131   4                              }
  132   3                              else if(TIM_3 == tim_n)
  133   3                              {
  134   4                                      S3CON |= 0x50;
  135   4                                      T3L = brt;
  136   4                                      T3H = brt >> 8;
  137   4                                      T4T3M |= 0x0a;
  138   4                              }
  139   3                              
  140   3                              P_SW2 &= ~(0x01<<1);
  141   3                              if((UART3_RX_P00 == uart_rx_pin) && (UART3_TX_P01 == uart_tx_pin))
  142   3                              {
  143   4                                      P_SW2 |= 0x00;
  144   4                              }
  145   3                              else if((UART3_RX_P50 == uart_rx_pin) && (UART3_TX_P51 == uart_tx_pin))
  146   3                              {
  147   4                                      P_SW2 |= 0x02;
  148   4                              }
  149   3                              
  150   3                              IE2 |= 0x01<<3; //允许串行口3中断
  151   3                              busy[3] = 0;
  152   3                              break;
  153   3                      }
  154   2                      
  155   2                      case UART_4:
  156   2                      {
  157   3                              if(TIM_2 == tim_n)
  158   3                              {
  159   4                                      S4CON |= 0x10;
  160   4                                      T2L = brt;
  161   4                                      T2H = brt >> 8;
  162   4                                      AUXR |= 0x14;
  163   4                              }
  164   3                              else if(TIM_4 == tim_n)
  165   3                              {
  166   4                                      S4CON |= 0x50;
  167   4                                      T4L = brt;
  168   4                                      T4H = brt >> 8;
  169   4                                      T4T3M |= 0xa0;
  170   4                              }
  171   3      
  172   3                              P_SW2 &= ~(0x01<<2);
  173   3                              if((UART4_RX_P02 == uart_rx_pin) && (UART4_TX_P03 == uart_tx_pin))
  174   3                              {
  175   4                                      P_SW2 |= 0x00;
  176   4                              }
  177   3                              else if((UART4_RX_P52 == uart_rx_pin) && (UART4_TX_P53 == uart_tx_pin))
  178   3                              {
  179   4                                      P5M0 = 0x00;
  180   4                                      P5M1 = 0x01<<2;//P5.2 需要设置为高阻
  181   4                                      P_SW2 |= 0x04;
  182   4                              }
  183   3                              IE2 |= 0x01<<4; //允许串行口4中断
C251 COMPILER V5.60.0,  zf_uart                                                            13/07/24  18:02:20  PAGE 4   

  184   3                              busy[4] = 0;
  185   3                              break;
  186   3                      }
  187   2                      
  188   2              }
  189   1      
  190   1      }
  191          
  192          //-------------------------------------------------------------------------------------------------------
             -------------
  193          //  @brief      串口字节输出
  194          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  195          //  @param      dat             需要发送的字节
  196          //  @return     void        
  197          //  Sample usage:               uart_putchar(UART_1,0xA5);       // 串口1发送0xA5
  198          //-------------------------------------------------------------------------------------------------------
             -------------
  199          void uart_putchar(UARTN_enum uart_n,uint8 dat)
  200          {
  201   1              switch(uart_n)
  202   1              {
  203   2                      case UART_1:
  204   2                              while (busy[1]);
  205   2                              busy[1] = 1;
  206   2                              SBUF = dat;
  207   2                          break;
  208   2                      case UART_2:
  209   2                              while (busy[2]);
  210   2                              busy[2] = 1;
  211   2                              S2BUF = dat;
  212   2                          break;
  213   2                      case UART_3:
  214   2                              while (busy[3]);
  215   2                              busy[3] = 1;
  216   2                              S3BUF = dat;
  217   2                          break;
  218   2                      case UART_4:
  219   2                              while (busy[4]);
  220   2                              busy[4] = 1;
  221   2                              S4BUF = dat;
  222   2                          break;
  223   2              }
  224   1      }
  225          
  226          
  227          //-------------------------------------------------------------------------------------------------------
             -------------
  228          //  @brief      串口发送数组
  229          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  230          //  @param      *buff           要发送的数组地址
  231          //  @param      len             发送长度
  232          //  @return     void
  233          //  Sample usage:               uart_putbuff(UART_1,&a[0],5);
  234          //-------------------------------------------------------------------------------------------------------
             -------------
  235          void uart_putbuff(UARTN_enum uart_n,uint8 *p,uint16 len)
  236          {
  237   1          while(len--)
  238   1              uart_putchar(uart_n,*p++);
  239   1      }
  240          
  241          
  242          //-------------------------------------------------------------------------------------------------------
             -------------
  243          //  @brief      串口发送字符串
  244          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
C251 COMPILER V5.60.0,  zf_uart                                                            13/07/24  18:02:20  PAGE 5   

  245          //  @param      *str            要发送的字符串地址
  246          //  @return     void
  247          //  Sample usage:               uart_putstr(UART_1,"i lvoe you"); 
  248          //-------------------------------------------------------------------------------------------------------
             -------------
  249          void uart_putstr(UARTN_enum uart_n,uint8 *str)
  250          {
  251   1          while(*str)
  252   1          {
  253   2              uart_putchar(uart_n, *str++);
  254   2          }
  255   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       606     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       205         12
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
